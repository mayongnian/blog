[ { "title": "类的扩展", "url": "/posts/javase-ch5/", "categories": "技术笔记, Java基础", "tags": "Java基础", "date": "2021-12-08 11:40:13 +0800", "snippet": "第五章 类的扩展5.1 接口的本质# 接口的概念接口声明了一组能力，本身并没有进行实现，它只是一个约定修饰符一般都是public# 接口涉及的对象（实现和使用的双方并不直接相互依赖，只是通过接口交互）接口本身的定义：java8之前，不能定义方法的实现实现该接口的类：需要根据具体实现类的特性，编写接口内的所有方法使用该接口的类：将入参设置为接口类，通过调用接口的方法实现一些功能通过这种方式，可以使实现该接口的所有类，使用相通的一些方法，例如：比较大小，排序# 接口的细节1. 接口中的变量&amp;gt; 不管加不加修饰符，接口中的变量都是public static final&amp;gt; 这个变量可以通过“接口名.变量名”的方式使用2. 接口的继承&amp;gt; 接口间也可以相互继承&amp;gt; 与类不同的是：一个接口可以有多个父接口3. 类的继承与接口&amp;gt; 类的继承与接口实现可以共存&amp;gt; 即：继承一个父类，同时实现一个或多个接口&amp;gt; public class Child extends Base implements Ichild {//...}4. instanceof&amp;gt; 接口也可以通过instanceof关键字判断对象是否实现了某接口# 使用接口替代继承&amp;gt; 既可以统一处理，又可以防止继承破坏封装# java8对接口的增强&amp;gt; 静态方法：可以通过接口名.方法名直接调用，默认只能为public&amp;gt; 默认方法：带有默认实现的方法（与抽象方法对对应），可以不重写，抽象方法则必须实现# java9对接口的增强&amp;gt; 静态方法的可见性：可以为pravite（方便静态或默认方法复用代码）5.2抽象类# 抽象类的概念&amp;gt; 抽象是相对于具体而言的，具体类有直接对应的对象，抽象类没有，只表达抽象的概念，一般是具体类的比较上层的父类。# 抽象方法和抽象类（abstract修饰）1. 抽象类&amp;gt; 不能创建对象，要创建对象，必须使用它的具体子类2. 抽象方法&amp;gt; 只有方法声明，没有具体实现。3. 抽象类的继承&amp;gt; 若继承抽象类，必须实现抽象类中定义的所有抽象方法，除非它自己也声明为抽象类0. 注意：&amp;gt; 抽象类虽然不能实例化，但可以作为具体子类的引用# 抽象类是一种语法机制（减少人为误用）xi&amp;gt; 使用抽象方法而非空方法体，子类就知道必须要实现该方法，而不可能忽略，忽略就会编译报错&amp;gt; 使用抽象类，类的使用者创建对象时，就知道必须要使用某个类的具体子类，而不可能误用不完整的父类# 抽象类和接口&amp;gt; 接口中不能定义实例变量，而抽象类可以，一个类可以实现多个接口，但只能继承一个类&amp;gt; 抽象类和接口时配合关系，而非替代关系，一个接口通常有一个对应的抽象类&amp;gt; 接口声明能力&amp;gt; 抽象类提供默认实现，实现全部或部分方法&amp;gt; 具体使用时，一个类想要实现接口，有两种选择：1.实现接口，自己实现全部方法；2.继承抽象类，根据需要重写方法；&amp;gt; 继承的好处时复用代码，只需重写需要的部分，但如果这个具体类已经有父类了，就只能选择实现接口。5.3 内部类5.4 枚举" }, { "title": "java数据类型", "url": "/posts/javase-ch2/", "categories": "技术笔记, Java基础", "tags": "Java基础", "date": "2021-12-08 11:40:13 +0800", "snippet": "java数据类型基本类型 1字节（byte） = 8位（bit）整型 类型 字节数 默认值 注释 byte 1 0   short 2 0   int 4 0   long 8 0L 末尾加L或l 浮点型 类型 字节数 默认值 注释 float 4 0.0f   double 8 0.0d 小数默认为double 字符型 类型 字节数 默认值 注释 char 2 ‘u\\0000’ 本质为无符号位整数 布尔型 类型 字节数 默认值 注释 boolean   false   引用类型 未初始化的引用类型，默认值为null类(class)&amp;gt; 类之间可以相互继承，一个类可以继承一个父类，同时实现一个或多个接口# 具体类# 抽象类# 枚举&amp;gt; 枚举在编译时会被转换为类，所以它也算一种特定格式的类接口(interface)&amp;gt; 接口间可以相互继承数组(array)&amp;gt; 数组和集合类是有本质区别的，注意区分" } ]
