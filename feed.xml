<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://yongnian.site/</id><title>YN's Den</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2021-12-08T13:59:08+08:00</updated> <author> <name>yongnian</name> <uri>https://yongnian.site/</uri> </author><link rel="self" type="application/atom+xml" href="https://yongnian.site/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="https://yongnian.site/"/> <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator> <rights> © 2021 yongnian </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>类的扩展</title><link href="https://yongnian.site/posts/javase-ch5/" rel="alternate" type="text/html" title="类的扩展" /><published>2021-12-08T11:40:13+08:00</published> <updated>2021-12-08T11:40:13+08:00</updated> <id>https://yongnian.site/posts/javase-ch5/</id> <content src="https://yongnian.site/posts/javase-ch5/" /> <author> <name>yongnian</name> </author> <category term="技术笔记" /> <category term="Java基础" /> <summary> 第五章 类的扩展 5.1 接口的本质 # 接口的概念 接口声明了一组能力，本身并没有进行实现，它只是一个约定 修饰符一般都是public # 接口涉及的对象 （实现和使用的双方并不直接相互依赖，只是通过接口交互） 接口本身的定义：java8之前，不能定义方法的实现 实现该接口的类：需要根据具体实现类的特性，编写接口内的所有方法 使用该接口的类：将入参设置为接口类，通过调用接口的方法实现一些功能 通过这种方式，可以使实现该接口的所有类，使用相通的一些方法，例如：比较大小，排序 # 接口的细节 1. 接口中的变量 &amp;gt; 不管加不加修饰符，接口中的变量都是public static final &amp;gt; 这个变量可以通过“接口名.变量名”的方式使用 2. 接口的继承 &amp;gt; 接口间也可以相互继承 &amp;gt; 与类不同的是：一个接口可以有多个父接口 3. 类的继承与接口 &amp;gt;... </summary> </entry> <entry><title>java数据类型</title><link href="https://yongnian.site/posts/javase-ch2/" rel="alternate" type="text/html" title="java数据类型" /><published>2021-12-08T11:40:13+08:00</published> <updated>2021-12-08T11:40:13+08:00</updated> <id>https://yongnian.site/posts/javase-ch2/</id> <content src="https://yongnian.site/posts/javase-ch2/" /> <author> <name>yongnian</name> </author> <category term="技术笔记" /> <category term="Java基础" /> <summary> java数据类型 基本类型 1字节（byte） = 8位（bit） 整型 类型 字节数 默认值 注释 byte 1 0   short 2 0   int 4 0   long 8 0L 末尾加L或l 浮点型 类型 字节数 默认值 注释 float 4 0.0f ... </summary> </entry> </feed>
